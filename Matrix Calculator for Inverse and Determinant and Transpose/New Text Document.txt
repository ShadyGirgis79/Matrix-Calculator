#include <cmath>
#include <cstdio>
#include <cstring>
#include <string>
#include <string.h>
#include <vector>
#include <iostream>
#include <algorithm>
#include <iomanip>

using namespace std;

int main()
{
    double matrix[100][100];
    double inv[100][100];
    double adj[100][100];
    double Result[100][100];
    int n ;   //For number of row and column

		 x = determinant(matrix, r);
                if (x == 0)
                {
                    cout << "ERROR!" << endl;
                }

                else
                {
                    if (n == 2) /*For Inverse Matrix 2x2*/
                    {
                        adj[0][0] = matrix[1][1];
                        adj[0][1] = -matrix[0][1];
                        adj[1][0] = -matrix[1][0];
                        adj[1][1] = matrix[0][0];

                        for (int i = 0; i < 2; i++)
                        {
                            for (int j = 0; j < 2; j++)
                            {
                                inv[i][j] = adj[i][j] / x;
                            }
                        }

                        for (int w = 0; w <= n - 1; w++)
                        {
                            for (int u = 0; u <= n - 1; u++)
                            {
                                Result[w][u] = 0;
                                for (int p = 0; p <= n - 1; p++)
                                {
                                    Result[w][u] += inv[w][p] * matrix[p][u];
                                }
                            }
                        }

		   else if (r == 3) /*For Inverse Matrix 3x3*/
                    {
                        adj[0][0] = matrix[1][1] * matrix[2][2] - matrix[2][1] * matrix[1][2];
                        adj[0][1] = -(matrix[1][0] * matrix[2][2] - matrix[2][0] * matrix[1][2]);
                        adj[0][2] = matrix[1][0] * matrix[2][1] - matrix[2][0] * matrix[1][1];
                        adj[1][0] = -(matrix[0][1] * matrix[2][2] - matrix[2][1] * matrix[0][2]);
                        adj[1][1] = matrix[0][0] * matrix[2][2] - matrix[2][0] * matrix[0][2];
                        adj[1][2] = -(matrix[0][0] * matrix[2][1] - matrix[2][0] * matrix[0][1]);
                        adj[2][0] = matrix[0][1] * matrix[1][2] - matrix[1][1] * matrix[0][2];
                        adj[2][1] = -(matrix[0][0] * matrix[1][2] - matrix[1][0] * matrix[0][2]);
                        adj[2][2] = matrix[0][0] * matrix[1][1] - matrix[1][0] * matrix[0][1];

                        for (int w = 0; w < 3; w++)
                        {
                            for (int u = 0; u < 3; u++)
                            {
                                inv[u][w] = adj[w][u];
                            }
                        }

                        for (int i = 0; i < 3; i++)
                        {
                            for (int j = 0; j < 3; j++)
                            {
                                Result[i][j] = inv[i][j] / x;
                            }
                        }


 		else if (r == 4) /*For Inverse Matrix 4x4*/
                    {
                        adj[0][0] = matrix[1][1] * (matrix[3][3] * matrix[2][2] - matrix[3][2] * matrix[2][3])
                            - matrix[2][1] * (matrix[3][3] * matrix[1][2] - matrix[3][2] * matrix[1][3])
                            + matrix[3][1] * (matrix[2][3] * matrix[1][2] - matrix[2][2] * matrix[1][3]);

                        adj[0][1] = -matrix[1][0] * (matrix[3][3] * matrix[2][2] - matrix[3][2] * matrix[2][3])
                            + matrix[2][0] * (matrix[3][3] * matrix[1][2] - matrix[3][2] * matrix[1][3])
                            - matrix[3][0] * (matrix[2][3] * matrix[1][2] - matrix[2][2] * matrix[1][3]);

                        adj[0][2] = matrix[1][0] * (matrix[3][3] * matrix[2][1] - matrix[3][1] * matrix[2][3])
                            - matrix[2][0] * (matrix[3][3] * matrix[1][1] - matrix[3][1] * matrix[1][3])
                            + matrix[3][0] * (matrix[2][3] * matrix[1][1] - matrix[2][1] * matrix[1][3]);

                        adj[0][3] = -matrix[1][0] * (matrix[3][2] * matrix[2][1] - matrix[3][1] * matrix[2][2])
                            + matrix[2][0] * (matrix[3][2] * matrix[1][1] - matrix[3][1] * matrix[1][2])
                            - matrix[3][0] * (matrix[2][2] * matrix[1][1] - matrix[2][1] * matrix[1][2]);


                        adj[1][0] = -matrix[0][1] * (matrix[3][3] * matrix[2][2] - matrix[3][2] * matrix[2][3])
                            + matrix[0][2] * (matrix[2][1] * matrix[3][3] - matrix[3][1] * matrix[2][3])
                            - matrix[0][3] * (matrix[2][1] * matrix[3][2] - matrix[2][2] * matrix[3][1]);

                        adj[1][1] = matrix[0][0] * (matrix[3][3] * matrix[2][2] - matrix[3][2] * matrix[2][3])
                            - matrix[0][2] * (matrix[2][0] * matrix[3][3] - matrix[3][0] * matrix[2][3])
                            + matrix[0][3] * (matrix[2][0] * matrix[3][2] - matrix[2][2] * matrix[3][0]);

                        adj[1][2] = -matrix[0][0] * (matrix[3][3] * matrix[2][1] - matrix[3][1] * matrix[2][3])
                            + matrix[0][1] * (matrix[2][0] * matrix[3][3] - matrix[3][0] * matrix[2][3])
                            - matrix[0][3] * (matrix[2][0] * matrix[3][1] - matrix[2][1] * matrix[3][0]);

                        adj[1][3] = matrix[0][0] * (matrix[3][2] * matrix[2][1] - matrix[3][1] * matrix[2][2])
                            - matrix[0][1] * (matrix[3][2] * matrix[2][0] - matrix[3][0] * matrix[2][2])
                            + matrix[0][2] * (matrix[2][0] * matrix[3][1] - matrix[3][0] * matrix[2][1]);


                        adj[2][0] = matrix[0][1] * (matrix[3][3] * matrix[1][2] - matrix[3][2] * matrix[1][3])
                            - matrix[0][2] * (matrix[3][3] * matrix[1][1] - matrix[3][1] * matrix[1][3])
                            + matrix[0][3] * (matrix[3][2] * matrix[1][1] - matrix[3][1] * matrix[1][2]);

                        adj[2][1] = -matrix[0][0] * (matrix[3][3] * matrix[1][2] - matrix[3][2] * matrix[1][3])
                            + matrix[0][2] * (matrix[3][3] * matrix[1][0] - matrix[3][0] * matrix[1][3])
                            - matrix[0][3] * (matrix[3][2] * matrix[1][0] - matrix[1][2] * matrix[3][0]);

                        adj[2][2] = matrix[0][0] * (matrix[3][3] * matrix[1][1] - matrix[3][1] * matrix[1][3])
                            - matrix[0][1] * (matrix[3][3] * matrix[1][0] - matrix[3][0] * matrix[1][3])
                            + matrix[0][3] * (matrix[3][1] * matrix[1][0] - matrix[3][0] * matrix[1][1]);

                        adj[2][3] = -matrix[0][0] * (matrix[3][2] * matrix[1][1] - matrix[3][1] * matrix[1][2])
                            + matrix[0][1] * (matrix[3][2] * matrix[1][0] - matrix[3][0] * matrix[1][2])
                            - matrix[0][2] * (matrix[3][1] * matrix[1][0] - matrix[3][0] * matrix[1][1]);

                        adj[3][0] = -matrix[0][1] * (matrix[2][3] * matrix[1][2] - matrix[2][2] * matrix[1][3])
                            + matrix[0][2] * (matrix[2][3] * matrix[1][1] - matrix[2][1] * matrix[1][3])
                            - matrix[0][3] * (matrix[2][2] * matrix[1][1] - matrix[2][1] * matrix[1][2]);

                        adj[3][1] = matrix[0][0] * (matrix[2][3] * matrix[1][2] - matrix[2][2] * matrix[1][3])
                            - matrix[0][2] * (matrix[2][3] * matrix[1][0] - matrix[2][0] * matrix[1][3])
                            + matrix[0][3] * (matrix[2][2] * matrix[1][0] - matrix[2][0] * matrix[1][2]);

                        adj[3][2] = -matrix[0][0] * (matrix[2][3] * matrix[1][1] - matrix[2][1] * matrix[1][3])
                            + matrix[0][1] * (matrix[2][3] * matrix[1][0] - matrix[2][0] * matrix[1][3])
                            - matrix[0][3] * (matrix[2][1] * matrix[1][0] - matrix[2][0] * matrix[1][1]);

                        adj[3][3] = matrix[0][0] * (matrix[2][2] * matrix[1][1] - matrix[2][1] * matrix[1][2])
                            - matrix[0][1] * (matrix[2][2] * matrix[1][0] - matrix[2][0] * matrix[1][2])
                            + matrix[0][2] * (matrix[1][0] * matrix[2][1] - matrix[2][0] * matrix[1][1]);


                        for (int w = 0; w < 4; w++)
                        {
                            for (int u = 0; u < 4; u++)
                            {
                                inv[u][w] = adj[w][u];
                            }
                        }

                        for (int i = 0; i < 4; i++)
                        {
                            for (int j = 0; j < 4; j++)
                            {
                                Result[i][j] = inv[i][j] / x;
                            }
                        }



}